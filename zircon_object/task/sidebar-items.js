initSidebarItems({"constant":[["TASK_RETCODE_SYSCALL_KILL",""]],"enum":[["ExceptionChannelType",""],["ExceptionType",""],["PolicyAction",""],["PolicyCondition",""],["SetPolicyOptions",""],["Status",""],["ThreadState","The thread state."],["ThreadStateKind",""],["TimerSlackDefaultMode",""]],"fn":[["check_timer_policy",""]],"struct":[["BasicPolicy",""],["Exception","An Exception represents a single currently-active exception."],["ExceptionContext",""],["ExceptionHeader",""],["ExceptionInfo",""],["ExceptionObject","This will be transmitted to registered exception handlers in userspace and provides them with exception state and control functionality. We do not send exception directly since it's hard to figure out when will the handle close."],["ExceptionReport",""],["Exceptionate","Kernel-owned exception channel endpoint."],["Job","Control a group of processes"],["JobDebuggerIterator","This is only used by ProcessStarting exceptions"],["JobInfo",""],["JobPolicy",""],["Process","Process abstraction"],["ProcessInfo",""],["SuspendToken",""],["Thread","Runnable / computation entity"],["ThreadFlag",""],["ThreadInfo",""],["TimerSlack",""],["TimerSlackPolicy",""]],"trait":[["ContextExt",""],["IntoResult",""],["Task","Task (Thread, Process, or Job)"]]});