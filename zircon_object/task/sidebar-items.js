initSidebarItems({"constant":[["TASK_RETCODE_SYSCALL_KILL","The return code set when a task is killed via zx_task_kill()."]],"enum":[["ExceptionChannelType","Type of the exception channel"],["ExceptionType","Type of exception"],["PolicyAction","The action taken when the condition happens specified by a policy."],["PolicyCondition","The condition when a policy is applied."],["SetPolicyOptions","Control the effect in the case of conflict between the existing policies and the new policies when setting new policies."],["Status","Status of a process."],["ThreadState","The thread state."],["ThreadStateKind","Possible values for \"kind\" in zx_thread_read_state and zx_thread_write_state."]],"fn":[["check_timer_policy","Check whether the policy is valid."]],"struct":[["BasicPolicy","The policy type."],["Exception","An Exception represents a single currently-active exception."],["ExceptionContext","Data associated with an exception (siginfo in linux parlance) Things available from regsets (e.g., pc) are not included here. For an example list of things one might add, see linux siginfo."],["ExceptionHeader","The common header of all exception reports."],["ExceptionObject","This will be transmitted to registered exception handlers in userspace and provides them with exception state and control functionality. We do not send exception directly since it's hard to figure out when will the handle close."],["ExceptionReport","Data reported to an exception handler for most exceptions."],["Exceptionate","Kernel-owned exception channel endpoint."],["Job","Control a group of processes"],["JobDebuggerIterator","This is only used by ProcessStarting exceptions"],["JobInfo","Information of a job."],["JobPolicy","Security and resource policies of a job."],["Process","Process abstraction"],["ProcessInfo","Information of a process."],["SuspendToken","Suspend the given task. Currently only thread or process handles may be suspended."],["Thread","Runnable / computation entity"],["ThreadFlag","Thread flags."],["ThreadInfo","The thread information."],["TimerSlackPolicy","Timer slack policy."]],"trait":[["IntoResult","`into_result` returns `Self` if the type parameter is already a `ZxResult`, otherwise wraps the value in an `Ok`."],["Task","Task (Thread, Process, or Job)"]]});